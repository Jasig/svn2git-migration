@Grab(group='org.codehaus.groovy.modules.http-builder', module='http-builder', version='0.5.1' )

import groovyx.net.http.*

def allAuthors = new File("allAuthors.txt");
def resolvedAuthors = new File("resolvedAuthors.txt");

def http = new HTTPBuilder( 'https://login.jasig.org/rest/usermanagement/latest/user' )
http.auth.basic 'svn2git', 'XXXXXXXX'
http.handler.success = { "Success!" }
http.handler.failure = { resp -> "Unexpected failure: ${resp.statusLine}" }

def authorsMap = new TreeMap(String.CASE_INSENSITIVE_ORDER);

def resolveAuthors(authorsFile, http, authorsMap) {
    def lineNum = 0;
    authorsFile.eachLine { line ->
        lineNum++;
        line = line.trim();
        if (line.length() == 0 || line.startsWith("#")) {
            return;
        }
        
        def lineParts = line.split("=");
        
        def svnAuthor = lineParts[0].trim();
        def gitAuthor;
        
        if (lineParts.length == 1) {
            http.get( query:[username:svnAuthor] ) { resp, xml ->
                if (resp.status == 200) {
                    gitAuthor = xml['display-name'].text() + " <" + xml.email.text() + ">";
                }
            }
        }
        else if (lineParts.length == 2) {
            gitAuthor = lineParts[1].trim();
        }
        else {
            throw new Exception(authorsFile + " - Failed to parse line " + lineNum + ", it did not have one or two parts: " + line, e);
        }
        
        if (gitAuthor == null) {
            gitAuthor = svnAuthor + "@committers.jasig.org <" svnAuthor + "@committers.jasig.org>";
        }
        
        println svnAuthor + " = " + gitAuthor;
        authorsMap.put(svnAuthor, gitAuthor);
    }
}

//Resolve svn usernames to "Full Name <email@address.com>
resolveAuthors(allAuthors, http, authorsMap);

//Write out resolved authors file
resolvedAuthors.withWriter { writer ->
    writer.writeLine("##");
    writer.writeLine("## GENERATED BY resolveJasigAuthors.groovy DO NOT MODIFY BY HAND");
    writer.writeLine("##");
    
    authorsMap.each() {svnAuth, gitAuth ->
        writer.writeLine(svnAuth + " = " + gitAuth);
    }
}
